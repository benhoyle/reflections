What happens when you initialize a repository? Why do you need to do it?

The Git configuration/system files are created and the folder begins to be 
treated as a new Git repository. No commits are present though. You
can run 'git status' to check the current status of the newly initialized
repository.

You need to do this so that Git can start tracking your files.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

It is an intermediate stage that is added to the repository as part of a 
 commit. You add files to the staging area using 'git add'. It is useful
 as it allows control over which files are commited. This may have security
 benefits and may be useful in logically separating changes.

How can you use the staging area to make sure you have one commit per logical change?

You can use 'git add' to only add files to the staging area that are related 
to the logical change. Files that are not related to the logical change may
be left out of the staging area but may still be changed in the working
directory.

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

- Adding experimental features (you can break things but still have a 
working master);
- Refactoring code (things are likely to go wrong, you always have a master
to return to);
- Creating other language versions;
- Messing with someone else's code; and
- Adapting a pre-existing project.
